# Use the latest 2.1 version of CircleCI pipeline process engine. 
version: 2.1

# Using a  custom command for reusabel code
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name sredevopstack-${CIRCLE_WORKFLOW_ID}
            
jobs:
  
  create_infrastructure:
    # Using the AWS Docker Image Aliases above.
    docker:
      - image: amazon/aws-cli
    steps:
      # Execute the couldFormation template to create the infrastrucre code
      - checkout
      - run: 
          name: Ensure Backend infrastrucre Exist
          # Gotchas: make sure file template.yml is in project home dir. not a sub folder.
          command: | 
            aws cloudformation deploy  --template-file template.yml  --stack-name sredevopstack
         # creating a Rollback when code return 1  delete aws stack
      - run: return 1
          - destroy_environment
            when: on_fail
    
  # here we are simulating a rollback/delete green environment on failure
  # we go and delete/destroy the infra. stack on aws
  # smoke_test_2:
  #   docker: 
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: 
  #         name: simulate error
  #         command: | 
  #         return 1  # simulate an error, cause the job to fail
  #     - destroy_environment
  #       when: on_fail 
      
  # A smoke test job to verify on something example is server up & running
  # smoke_test_1:
  #   docker: 
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl 
  #     - run: 
  #         name: Smoke Test 
  #         command: |
  #           #URL="http://ec2-18-220-43-92.us-east-2.compute.amazonaws.com/"
  #           URL=" http://cashdatastack.com/"
           
  #           if curl -s --head ${URL} # test if ec2 public endpoint exists
  #           then 
  #            return 0
  #           else 
  #            return 1
  #            fi 
   
   
  # # a job to configure an Ec2 instance & copy production files
  # configure_infrastructure:
  #   # A docker Image with python installed which is needed for ansible to run.
  #   docker:
  #     - image: python:3.9-alpine3.13
  #   steps:
  #     # A Filter to only run this job on master branch
  #     - checkout
  #     # our ssh key-pair for our EC2 instance (see project setting)
  #     # This ensures ansible can access our Ec2 instance
  #     - add_ssh_keys:
  #         fingerprints: ["e9:0d:1e:7a:e7:c5:6a:88:f2:4d:f9:f3:28:98:f0:e5"]

  #        # Install Dependencies 
  #     - run:
  #          name: Install Dependencies
  #          command: | 
  #             apk add --update ansible # install the dependencies needed for playbook

  #       # Executing ansible playbook
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i inventory playbook.yml 

        

workflows:
  SREDevops01_WF:
    jobs:
      # Run the jobs 
      - create_infrastructure

      # - smoke_test_1:
      #     requires:
      #       - create_infrastructure
      
      # - smoke_test_2:
      #     requires:
      #       - create_infrastructure

      # - configure_infrastructure:
      #     requires:
      #       - create_infrastructure
