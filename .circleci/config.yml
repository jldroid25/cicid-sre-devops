# Use the latest 2.1 version of CircleCI pipeline process engine. 
version: 2.1

# Using a  custom command for reusabel code
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name sredevopstack
          when: on_fail
      - run: 
          command: echo "Rolling back to Green Server - Deleted Stack"

jobs:
  create_infrastructure:
    # Using the AWS Docker Image Aliases above.
    docker:
      - image: amazon/aws-cli
    steps:
      # Execute the couldFormation template to create the infrastrucre code
      - checkout
      - run: 
          name: Ensure Backend infrastrucre Exist
          # Gotchas: make sure file template.yml is in project home dir. not a sub folder.
          command: | 
            aws cloudformation deploy  --template-file template.yml  --stack-name sredevopstack
     
      # creating a Rollback when code return 1  delete aws stack
      # - run: 
      #     command: |
      #       return 1
      # - destroy_environment
        
    #A smoke test job to verify on something 
    # example is server up & running
  smoke_test_1:
    docker: 
      - image: alpine:latest
    steps:
      - run: apk add --update curl 
      - run: 
          name: Smoke Test 
          command: |
            #URL="http://ec2-18-220-43-92.us-east-2.compute.amazonaws.com/"
            URL=" http://cashdatastack.com/"
           
            if curl -s --head ${URL} # test if ec2 public endpoint exists
            then 
             return 0
            else 
             return 1
             fi 
      
  # here we are simulating a rollback/delete green environment on failure
  # we go and delete/destroy the infrastructure  aws stack .
  # smoke_test_2:
  #   docker: 
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: 
  #         name: simulate error
  #         command: | 
  #           return 1  # simulate an error, cause the job to fail
  #     - destroy_environment
         
  # a job to configure an Ec2 instance & copy production files
  # Comment this job before create_infra job.
  # then update host & inventory file with EC2 connection info 
  # Then uncomment this job , code check , to perform server update.
  configure_infrastructure:
    # A docker Image with python installed which is needed for ansible to run.
    docker:
      - image: python:3.9-alpine3.13
    steps:
      # A Filter to only run this job on master branch
      - checkout
      # our ssh key-pair for our EC2 instance (see project setting)
      # This ensures ansible can access our Ec2 instance
      - add_ssh_keys:
          fingerprints: ["e9:0d:1e:7a:e7:c5:6a:88:f2:4d:f9:f3:28:98:f0:e5"]

         # Install Dependencies 
      - run:
           name: Install Dependencies
           command: | 
              apk add --update ansible # install the dependencies needed for playbook

        # Executing ansible playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory playbook.yml -vvvv

  # Promote to Production : Making the switch from old to new / Blue to Green ENV.
  # Jobs to promote new environment to Production & decommission the old
  # environment in an automated process.

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: | 
          aws cloudformation deploy --template-file bucket.yml --stack-name "${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides PipelineId="${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-2  
      - run: aws s3  sync . s3://"${CIRCLE_WORKFLOW_ID}" --delete

  # promote_to_production:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: | 
  #         aws cloudformation deploy 
  #         --template-file cloudformation.yml 
  #         --stack-name cloudfront  
  #         --parameter-overrides PipelineID="${canadcicd}" 
  #         --region us-east-2

workflows:
  SREDevops01_WF:
    jobs:
      # Run the jobs 
      - create_infrastructure

      - configure_infrastructure:
          requires:
            - create_infrastructure

      - smoke_test_1:
          requires:
            - create_infrastructure
      
      # - smoke_test_2:
      #     requires:
      #       - create_infrastructure

      - create_and_deploy_front_end

      # - promote_to_production:
      #      requires: [create_and_deploy_front_end]
